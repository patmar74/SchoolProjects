
'Author: Patrick Martin
'Pseudocode:
'Create a string array for a deck of cards
'Create a function which random shuffles the cards. Create a second array populate based on random numbers until all cards are in new array. Copy shuffled array over to deck array to hand out cards to players.
'Have the user select the number of players 
'Have the user select how many cards each player gets (different games have different number of cards players start).
'Deal cards to each player
'Have each player display their hand when requested into a list box.

Public Class CardShuffleArrays
    Dim cardValues() As String = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"}
    Dim cardSuits() As String = {"Spades", "Clubs", "Hearts", "Diamonds"}
    Dim deck(53) As String ' Default deck size with jokers is 54

    Private Sub CreateDeck()

        Dim cardInDeck As Integer = 0 'location of card in deck

        If chkOneSuit.Checked Then ' If only one suit is checked only include hearts cards
            For Each value As String In cardValues
                deck(cardInDeck) = value + " of Hearts"
                cardInDeck += 1 ' select next location in deck
            Next
        Else
            For Each value As String In cardValues
                For Each suit In cardSuits
                    deck(cardInDeck) = value + " of " + suit
                    cardInDeck += 1
                Next
            Next
        End If

        If chkJokers.Checked Then 'If play with jokers is checked then add jokers to deck
            deck(cardInDeck) = "Joker"
            cardInDeck += 1
            deck(cardInDeck) = "Joker" ' Next card is Joker too
            cardInDeck += 1
        End If

        ReDim Preserve deck(cardInDeck - 1) ' Make array dimensions to how many cards are in the deck


    End Sub


    Private Function ShuffleDeck() As String()

        Dim shuffledDeck(deck.Count - 1) As String ' initialize shuffled deck to same size as deck
        Dim nextIndex As Integer = 0
        Dim tempDeck(deck.Count - 1) As String ' initiallize a temp value with same size as deck

        For Each card In deck
            tempDeck(nextIndex) = card
            nextIndex += 1
        Next

        'debug code
        'MessageBox.Show(Join(tempDeck, ","c), "TempDeck")
        'debug code

        Dim cardsLeftToBeShuffled As Integer = tempDeck.Count() ' max index of cards left to be shuffled array
        Dim randomValue As Integer ' value generated by randomizer
        Dim Randomizer As New Random(Now.Millisecond) ' Random number generator
        Dim cardLocationInShuffledDeck As Integer = 0



        While cardsLeftToBeShuffled > 0 ' while there are still cards left to be shuffled keep shuffling
            Dim upperBound As Integer = tempDeck.Count()  ' upper bound of randomizer non inclusive
            randomValue = Randomizer.Next(upperBound - 1) ' generate next random number to upperbound inclusive

            'debug code
            ' MessageBox.Show(randomValue, "random value")
            'debug code

            shuffledDeck(cardLocationInShuffledDeck) = tempDeck(randomValue) ' put random card in shuffled deck

            'debug code
            ' MessageBox.Show(Join(shuffledDeck, ","c), "Shuffled Deck")
            'debug code

            tempDeck(randomValue) = Nothing

            'debug code
            ' MessageBox.Show(Join(tempDeck, ","c), "TempDeckNothing")
            'debug code

            Dim skipCards As Integer = 0 ' will be used to make new tempDeck

            For i As Integer = 0 To (tempDeck.Count() - 1) 'essentially goes over temp deck and when it encounters Nothing, it skips it and moves all other elements over by the number of Nothings in temp deck
                If tempDeck(i) <> Nothing Then
                    tempDeck(i - skipCards) = tempDeck(i)
                Else
                    skipCards += 1
                End If

            Next
            cardLocationInShuffledDeck += 1 ' select next location in shuffled deck
            cardsLeftToBeShuffled -= 1
            ReDim Preserve tempDeck(cardsLeftToBeShuffled - 1) ' resize tempDeck with new non-Nothing elements

            ' debug code
            '  MessageBox.Show(cardsLeftToBeShuffled, "Cards Left to be Shuffled")
            ' MessageBox.Show(Join(tempDeck, ","c), "TempDeckAfter")
            ' debug code

        End While
        Return shuffledDeck
    End Function

    Private Sub DealCards()
        lstPlayer1Hand.Items.Clear()
        lstPlayer2Hand.Items.Clear()
        lstPlayer3Hand.Items.Clear()
        lstPlayer4Hand.Items.Clear()
        lstPlayer5Hand.Items.Clear()

        Dim nextCardToBeDrawn As Integer = 0 ' index for shuffled cards
        Dim cardsInHand As Integer = 0 ' Number of cards in hand
        Dim shuffledDeck() As String = ShuffleDeck()
        Dim handSize As Integer = CInt(txtHandSize.Text)
        If rad1Player.Checked Then ' 1 Player deal cards
            If handSize > shuffledDeck.Count() Then
                MessageBox.Show("Too many cards are required, please choose another handsize", "Not Enough Cards In Deck")
            Else
                Do
                    lstPlayer1Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    cardsInHand += 1
                Loop Until cardsInHand = handSize
            End If

        ElseIf rad2Player.Checked Then ' 2 Player deal cards
            If handSize * 2 > shuffledDeck.Count() Then
                MessageBox.Show("Too many cards are required, please choose another handsize", "Not Enough Cards In Deck")
            Else
                Do
                    lstPlayer1Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer2Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    cardsInHand += 1
                Loop Until cardsInHand = handSize
            End If

        ElseIf rad3Player.Checked Then ' 3 Player deal cards
            If handSize * 3 > shuffledDeck.Count() Then
                MessageBox.Show("Too many cards are required, please choose another handsize", "Not Enough Cards In Deck")
            Else
                Do
                    lstPlayer1Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer2Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer3Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    cardsInHand += 1
                Loop Until cardsInHand = handSize
            End If
        ElseIf rad4Player.Checked Then ' 4 Player deal cards
            If handSize * 4 > shuffledDeck.Count() Then
                MessageBox.Show("Too many cards are required, please choose another handsize", "Not Enough Cards In Deck")
            Else
                Do
                    lstPlayer1Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer2Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer3Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer4Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    cardsInHand += 1
                Loop Until cardsInHand = handSize
            End If
        Else ' 5 Player deal cards
            If handSize * 5 > shuffledDeck.Count() Then
                MessageBox.Show("Too many cards are required, please choose another handsize", "Not Enough Cards In Deck")
            Else
                Do
                    lstPlayer1Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer2Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer3Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer4Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    lstPlayer5Hand.Items.Add(shuffledDeck(nextCardToBeDrawn))
                    nextCardToBeDrawn += 1
                    cardsInHand += 1
                Loop Until cardsInHand = handSize
            End If
        End If


    End Sub


    Private Sub btnDealCards_Click(sender As Object, e As EventArgs) Handles btnDealCards.Click
        ReDim deck(53) ' purely for hitting button multiple times to avoid errors
        CreateDeck()

        'debug code
        'lstDeck.Items.Clear()
        'For Each card In deck
        '    lstDeck.Items.Add(card)
        'Next

        'lstShuffledDeck.Items.Clear()
        'Dim shuffledDeck() As String = ShuffleDeck()

        'For Each card In shuffledDeck
        '    lstShuffledDeck.Items.Add(card)
        'Next
        'debug Code

        If IsNumeric(txtHandSize.Text) Then
            If CInt(txtHandSize.Text) <= 0 Then
                MessageBox.Show("Please enter a number greater than zero for the handsize", "Input Error")
            Else
                DealCards()
            End If
        Else
            MessageBox.Show("Please enter a number for the handsize", "Input Error")
        End If


    End Sub


    

End Class
